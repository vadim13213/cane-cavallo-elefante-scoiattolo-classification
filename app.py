import streamlit as st
import numpy as np
from PIL import Image
import requests
from io import BytesIO
import matplotlib.pyplot as plt
from streamlit_drawable_canvas import st_canvas

# URL –¥–æ API
API_URL = "https://chicken-cow-horse-sheep-classification.onrender.com/predict/"

# –ò–º–µ–Ω–∞ –∫–ª–∞—Å—Å–æ–≤
CLASS_NAMES = {
    "0": "chicken",
    "1": "cow",
    "2": "horse",
    "3": "sheep"
}

st.title("üêîüêÑüêéüêë –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∂–∏–≤–æ—Ç–Ω—ã—Ö")

tab = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º", ["üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "‚úèÔ∏è –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"])

image = None

if tab == "üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "jpeg", "png"])
    if uploaded_file:
        image = Image.open(uploaded_file).convert("RGB")

elif tab == "‚úèÔ∏è –ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
    st.write("–ù–∞—Ä–∏—Å—É–π—Ç–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º –Ω–∞ —á–µ—Ä–Ω–æ–º —Ñ–æ–Ω–µ:")
    canvas_result = st_canvas(
        fill_color="black",
        stroke_width=10,
        stroke_color="white",
        background_color="black",
        width=256,
        height=256,
        drawing_mode="freedraw",
        key="canvas_draw",
        update_streamlit=True
    )

    if canvas_result.image_data is not None:
        image = Image.fromarray((canvas_result.image_data).astype("uint8")).convert("RGB")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
if image:
    st.image(image, caption="–í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_container_width=True)

    if st.button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å"):
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_resized = image.resize((64, 64))
        buffered = BytesIO()
        img_resized.save(buffered, format="PNG")
        img_bytes = buffered.getvalue()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API
        files = {"file": ("image.png", img_bytes, "image/png")}
        response = requests.post(API_URL, files=files)

        if response.status_code == 200:
            result = response.json()

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å
            class_id = result.get("predicted_class", "unknown")
            class_name = CLASS_NAMES.get(class_id, f"Unknown class: {class_id}")

            st.subheader("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å:")
            st.write(class_name)

            # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            raw_probs = result.get("probabilities", {})
            readable_probs = {CLASS_NAMES.get(k, k): v for k, v in raw_probs.items()}

            st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π:")
            fig, ax = plt.subplots()
            ax.bar(readable_probs.keys(), readable_probs.values(), color="skyblue")
            ax.set_ylabel("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å")
            ax.set_ylim([0, 1])
            st.pyplot(fig)
        else:
            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API:")
            st.text(response.text)